<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IT日记</title>
  
  <subtitle>Life is Now.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-23T07:12:08.162Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Breeze.Temple</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gerrit 配置权限禁止直接 push</title>
    <link href="http://yoursite.com/2020/09/23/gerrit-disable-direct-push-and-allow-gerrit-push/"/>
    <id>http://yoursite.com/2020/09/23/gerrit-disable-direct-push-and-allow-gerrit-push/</id>
    <published>2020-09-23T06:58:29.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>配置 Gerrit 权限禁止直接 push 代码到仓库</p><a id="more"></a><p>关于 Gerrit Push 权限描述如下：</p><blockquote><p>This category controls how users are allowed to upload new commits to projects in Gerrit. It can either give permission to push directly into a branch, bypassing any code review process that would otherwise be used. Or it may give permission to upload new changes for code review, this depends on which namespace the permission is granted to.</p></blockquote><p>具体权限配置与 namespace 有关</p><ul><li><code>refs/for/*</code> 代码评审</li><li><code>refs/head/*</code> 直接提交</li><li><code>refs/tags/*</code> tag</li></ul><p>配置如下：</p><ul><li>Reference: <code>refs/for/*</code><ul><li>Read: ALLOW</li><li>Push: ALLOW</li><li>Push Merge Commit: ALLOW</li></ul></li><li>Reference: <code>refs/heads/*</code><ul><li>Read: ALLOW</li><li>Push: BLOCK</li><li>Label Code-Review: -1 +1</li></ul></li><li>Reference: <code>refs/tags/*</code><ul><li>Push: ALLOW</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配置 Gerrit 权限禁止直接 push 代码到仓库&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Gerrit" scheme="http://yoursite.com/categories/Tools/Gerrit/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="gerrit" scheme="http://yoursite.com/tags/gerrit/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins中安装Node.js</title>
    <link href="http://yoursite.com/2020/09/17/jenkins-nodejs/"/>
    <id>http://yoursite.com/2020/09/17/jenkins-nodejs/</id>
    <published>2020-09-17T02:51:05.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins中安装指定版本Node.js</p><a id="more"></a><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><ul><li><code>Manage Jenkins</code></li><li><code>Manage Plugins</code></li><li>Install <code>NodeJS</code></li></ul><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><ul><li><code>Manage Jenkins</code></li><li><code>Global Tool Configuration</code></li><li><code>NodeJS</code><ul><li>别名</li><li>版本</li></ul></li></ul><h2 id="Job使用"><a href="#Job使用" class="headerlink" title="Job使用"></a>Job使用</h2><ul><li>新建Job</li><li>构建环境</li><li>Provide Node &amp; npm bin/ folder to PATH</li><li>选择别名</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins中安装指定版本Node.js&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="CI" scheme="http://yoursite.com/categories/Tools/CI/"/>
    
    
      <category term="jenkins" scheme="http://yoursite.com/tags/jenkins/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>字符集与字符编码</title>
    <link href="http://yoursite.com/2020/08/24/character-sets-and-character-encoding/"/>
    <id>http://yoursite.com/2020/08/24/character-sets-and-character-encoding/</id>
    <published>2020-08-24T02:40:50.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>介绍如下几种概念</p><ul><li>字符集<ul><li>Unicode</li><li>GB2312</li><li>GB18030</li></ul></li><li>字符编码<ul><li>UTF-8</li><li>UTF-16LE</li><li>UTF-16BE</li></ul></li><li>字库</li></ul><a id="more"></a><h2 id="Character-Sets"><a href="#Character-Sets" class="headerlink" title="Character Sets"></a>Character Sets</h2><p>字符集是标准，是一个系统支持字符的集合，包括通用和地区性标准，例如</p><ul><li><a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener">Unicode</a></li><li><a href="https://zh.wikipedia.org/wiki/GB_2312" target="_blank" rel="noopener">GB2312</a></li><li>iso8859</li><li><a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E9%A1%B5" target="_blank" rel="noopener">Code Page</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E4%BA%94%E7%A2%BC" target="_blank" rel="noopener">Big5</a></li><li><a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII</a></li></ul><h2 id="Character-Encoding"><a href="#Character-Encoding" class="headerlink" title="Character Encoding"></a>Character Encoding</h2><p>字符集是字符的集合，字符编码用于定于字符集中的字符如何编码为特定的二进制数据，以便于在计算机中存储，<strong>是定义在字符集上的映射规则</strong></p><ul><li><a href="https://zh.wikipedia.org/wiki/UTF-8" target="_blank" rel="noopener">UTF-8</a></li><li><a href="https://zh.wikipedia.org/wiki/UTF-16" target="_blank" rel="noopener">UTF-16</a></li><li><a href="https://zh.wikipedia.org/wiki/GB_2312" target="_blank" rel="noopener">GB2312</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E4%BA%94%E7%A2%BC" target="_blank" rel="noopener">Big5</a></li><li><a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII</a></li></ul><blockquote><p>术语字符编码（character encoding），字符映射（character map），字符集（character set）或者代码页，在历史上往往是同义概念，即字符表（repertoire）中的字符如何编码为码元的流（stream of code units）–通常每个字符对应单个码元。</p></blockquote><h2 id="字库"><a href="#字库" class="headerlink" title="字库"></a>字库</h2><p>所有可读或可显示字符的数据库，是信息的集合</p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><ul><li>字库，决定了整个字符集能够展现表示的所有字符的范围</li><li>字符集，用一个编码值<code>code point</code>来表示一个字符，这个值称为字符对应于编码字符集（如：Unicode、ASCII）的序号</li><li>字符编码，是字符集和实际存储数值之间的转换关系。字符，是根据字符编码方案转换为一个二进制数值存储在计算机中</li><li>编码字符集Unicode，有UTF-8、UTF-16、UTF-32、UCS-2、UCS-4等多种字符编码</li><li>编码字符集ASCII，本身就是编码字符集，又是字符编码</li></ul><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode 和 UTF-8</a></li><li><a href="http://cenalulu.github.io/linux/character-encoding/" target="_blank" rel="noopener">十分钟搞清字符集和字符编码</a></li><li><a href="https://my.oschina.net/u/4407987/blog/3319285/print" target="_blank" rel="noopener">Unicode</a></li><li><a href="https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html#_2.2._GBXXXX%E5%AD%97%E7%AC%A6%E9%9B%86&%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">字符集和字符编码</a></li><li><a href="https://dailc.github.io/2017/05/03/char_charset_charEncoding.html" target="_blank" rel="noopener">字符，字符集，字符编码解惑</a></li><li><a href="https://www.cnblogs.com/malecrab/p/5300503.html" target="_blank" rel="noopener">细说：Unicode, UTF-8, UTF-16, UTF-32, UCS-2, UCS-4</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">字符编码</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍如下几种概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符集&lt;ul&gt;
&lt;li&gt;Unicode&lt;/li&gt;
&lt;li&gt;GB2312&lt;/li&gt;
&lt;li&gt;GB18030&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符编码&lt;ul&gt;
&lt;li&gt;UTF-8&lt;/li&gt;
&lt;li&gt;UTF-16LE&lt;/li&gt;
&lt;li&gt;UTF-16BE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字库&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Character Encoding/Fonts" scheme="http://yoursite.com/categories/Tools/Character-Encoding-Fonts/"/>
    
    
      <category term="character set" scheme="http://yoursite.com/tags/character-set/"/>
    
      <category term="gb18030" scheme="http://yoursite.com/tags/gb18030/"/>
    
      <category term="character encoding" scheme="http://yoursite.com/tags/character-encoding/"/>
    
      <category term="unicode" scheme="http://yoursite.com/tags/unicode/"/>
    
      <category term="gdb2312" scheme="http://yoursite.com/tags/gdb2312/"/>
    
      <category term="utf-8" scheme="http://yoursite.com/tags/utf-8/"/>
    
      <category term="utf-16" scheme="http://yoursite.com/tags/utf-16/"/>
    
  </entry>
  
  <entry>
    <title>如何检查嵌入式系统内存占用</title>
    <link href="http://yoursite.com/2020/08/11/how-to-check-heap-size/"/>
    <id>http://yoursite.com/2020/08/11/how-to-check-heap-size/</id>
    <published>2020-08-11T07:30:37.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>size</code> 和 <code>nm</code> 分析系统内存开销</p><a id="more"></a><h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><p>应用总内存 = text + data + bss + heap</p><h2 id="size"><a href="#size" class="headerlink" title="size"></a>size</h2><pre><code class="shell">$ size src/out.elf   text       data        bss        dec        hex    filename6148556       3428    3137272    9289256     8dbe28    src/out.elf</code></pre><ul><li>text 代码段</li><li>data 数据段</li><li>bss 未初始化全局变量</li><li>heap 堆内存</li></ul><p>前三部分为静态内存分配</p><h2 id="nm"><a href="#nm" class="headerlink" title="nm"></a>nm</h2><p>使用 <code>nm</code> 分析符号表，找出占用大内存的符号</p><pre><code class="shell">$ nm --print-size --size-sort src/out.elf</code></pre><ul><li><code>b</code> 为局部bss变量</li><li><code>B</code> 为全局bss变量</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;size&lt;/code&gt; 和 &lt;code&gt;nm&lt;/code&gt; 分析系统内存开销&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Prof" scheme="http://yoursite.com/categories/Tools/Prof/"/>
    
      <category term="GCC" scheme="http://yoursite.com/categories/C/GCC/"/>
    
    
      <category term="nm" scheme="http://yoursite.com/tags/nm/"/>
    
      <category term="size" scheme="http://yoursite.com/tags/size/"/>
    
      <category term="bss" scheme="http://yoursite.com/tags/bss/"/>
    
  </entry>
  
  <entry>
    <title>分析 ELF 段和符号大小</title>
    <link href="http://yoursite.com/2020/07/31/how-to-analyze-size-of-ELF-sections-and-symbol/"/>
    <id>http://yoursite.com/2020/07/31/how-to-analyze-size-of-ELF-sections-and-symbol/</id>
    <published>2020-07-31T06:55:21.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>使用工具分析 ELF 以了解内存占用</p><ul><li>nm</li><li>size</li><li>readelf</li></ul><a id="more"></a><h2 id="nm"><a href="#nm" class="headerlink" title="nm"></a>nm</h2><pre><code class="shell">$ nm --print-size --size-sort a.out$ nm --print-size --size-sort --radix=d a.out</code></pre><h2 id="size"><a href="#size" class="headerlink" title="size"></a>size</h2><pre><code class="shell">$ size a.out   text       data        bss        dec        hex    filename   1900        628         16       2544        9f0    a.out$ size -A -d a.out</code></pre><h2 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h2><pre><code class="shell">$ readelf -e a.out</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用工具分析 ELF 以了解内存占用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nm&lt;/li&gt;
&lt;li&gt;size&lt;/li&gt;
&lt;li&gt;readelf&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Linker" scheme="http://yoursite.com/categories/C/Linker/"/>
    
    
      <category term="nm" scheme="http://yoursite.com/tags/nm/"/>
    
      <category term="size" scheme="http://yoursite.com/tags/size/"/>
    
  </entry>
  
  <entry>
    <title>如何调试嵌入式系统</title>
    <link href="http://yoursite.com/2020/07/23/how-to-debug-an-embedded-system/"/>
    <id>http://yoursite.com/2020/07/23/how-to-debug-an-embedded-system/</id>
    <published>2020-07-23T01:50:47.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>嵌入式系统调试的两种方式：</p><ul><li>Software Debugger<ul><li>gdbserver</li><li>redboot</li></ul></li><li>Hardware Debugger<ul><li>jtag</li><li>swd</li><li>jlink</li></ul></li></ul><a id="more"></a><h2 id="Software-Debugger"><a href="#Software-Debugger" class="headerlink" title="Software Debugger"></a>Software Debugger</h2><p><img src="/images/gnu/1595471565914.png" alt="gdbserver典型应用场景"></p><ul><li><code>gdb</code> 运行于宿主机</li><li><code>gdbserver</code> 运行于目标机，核心依赖于 <code>ptrace</code>，是轻量级的GDB调试器，担任着调试代理的角色</li><li>使用网口/串口连接通信</li></ul><p><img src="/images/gnu/1595471933130.png" alt="本地调试与远程调试"></p><h3 id="gdbserver"><a href="#gdbserver" class="headerlink" title="gdbserver"></a>gdbserver</h3><h3 id="redboot"><a href="#redboot" class="headerlink" title="redboot"></a>redboot</h3><p>eCos redboot 包含有 <code>GDB stub</code>，可当作 <code>GDB Server</code> 用</p><h2 id="Hardware-Debugger"><a href="#Hardware-Debugger" class="headerlink" title="Hardware Debugger"></a>Hardware Debugger</h2><p><img src="/images/gnu/1595471003633.png" alt="jtag典型应用场景"></p><ul><li><code>gdb</code> 运行于宿主机</li><li>需要硬件仿真器</li><li>需要芯片支持</li></ul><h2 id="OpenOCD"><a href="#OpenOCD" class="headerlink" title="OpenOCD"></a>OpenOCD</h2><p>OpenOCD（Open On-Chip Debugger）开源片上调试器，<strong>是一款开源软件</strong>。旨在提供针对嵌入式设备的调试、系统编程和边界扫描功能。是在仿真器的辅助下完成的，仿真器是能够提供调试目标的电信号的小型硬件单元。<strong>仿真器是必须的</strong>，因为宿主机通常不具备这种电信号的直接解析功能。</p><p><img src="/images/gnu/1595472703759.png" alt="1595472703759"></p><p><img src="/images/gnu/1595473016901.png" alt="1595473016901"></p><p>分为三部分，详见<a href="https://www.slideshare.net/linaroorg/hkg18403-introducing-openocd-status-of-openocd-on-aarch64" target="_blank" rel="noopener">Introducing OpenOCD: Status of OpenOCD on AArch64</a>：</p><ul><li>Development Hardware</li><li>Debug Adapter</li><li>Host Computer</li></ul><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><ol><li>Linux<ul><li>使用 JTAG 仿真器调试 Linux 内核</li><li>使用 gdbserver 调试 Linux 应用</li><li>同时使用</li><li><a href="https://blog.csdn.net/yifeng_1118/article/details/66480266" target="_blank" rel="noopener">JTAG调试内核和gdbserver冲突问题</a></li></ul></li><li>eCos<ul><li>使用 JTAG 仿真器调试，带有硬件断点/watch</li><li>使用 RedBoot 调试</li></ul></li><li>OpenOCD<ul><li>JTAG ?</li><li>SWD ?</li><li>gdbserver ?</li></ul></li></ol><h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h2><ol><li><a href="https://www.cnblogs.com/ccxikka/p/10519518.html" target="_blank" rel="noopener">gdb调试原理及qemu中的gdbserver</a></li><li><a href="https://stackoverflow.com/questions/13496389/gdb-remote-protocol-how-to-analyse-packets" target="_blank" rel="noopener">GDB remote protocol: how to analyse packets?</a></li><li><a href="https://doc.ecoscentric.com/cdt-guide/ch-debug.html" target="_blank" rel="noopener">Debugging eCos applications</a></li><li><a href="https://en.wikipedia.org/wiki/Gdbserver" target="_blank" rel="noopener">gdbserver</a></li><li><a href="https://blog.csdn.net/LEON1741/article/details/72846434" target="_blank" rel="noopener">浅论各种调试接口的区别</a></li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/jtag-debugging/index.html#" target="_blank" rel="noopener">OpenOCD JTAG 调试</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嵌入式系统调试的两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Software Debugger&lt;ul&gt;
&lt;li&gt;gdbserver&lt;/li&gt;
&lt;li&gt;redboot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hardware Debugger&lt;ul&gt;
&lt;li&gt;jtag&lt;/li&gt;
&lt;li&gt;swd&lt;/li&gt;
&lt;li&gt;jlink&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="GDB" scheme="http://yoursite.com/categories/Tools/GDB/"/>
    
    
      <category term="gdb" scheme="http://yoursite.com/tags/gdb/"/>
    
      <category term="jtag" scheme="http://yoursite.com/tags/jtag/"/>
    
      <category term="gdbserver" scheme="http://yoursite.com/tags/gdbserver/"/>
    
      <category term="jlink" scheme="http://yoursite.com/tags/jlink/"/>
    
      <category term="swd" scheme="http://yoursite.com/tags/swd/"/>
    
      <category term="openocd" scheme="http://yoursite.com/tags/openocd/"/>
    
  </entry>
  
  <entry>
    <title>如何正确拷贝字符串</title>
    <link href="http://yoursite.com/2020/07/20/how-to-copy-string-correctly/"/>
    <id>http://yoursite.com/2020/07/20/how-to-copy-string-correctly/</id>
    <published>2020-07-20T02:23:56.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<ul><li>strcpy</li><li>strncpy</li><li>memcpy</li><li>snprintf</li><li>strlen</li><li>sizeof</li></ul><p>正确无隐患拷贝字符串</p><a id="more"></a><h2 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h2><p><code>strlen</code> 运行时计算字符串长度，当字符数组中不存在 <code>\0</code> 时，计算错误</p><h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h2><p><code>sizeof</code> 编译时计算分配空间，字符数组大小</p><h2 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h2><pre><code class="c">    char *strcpy(char *dest, const char *src);</code></pre><p><code>strcpy</code> 提供字符串的复制，只用于字符串复制，会复制字符串的结束符。不需要指定长度，它遇到被复制字符的串结束符 <code>\0</code> 才结束，所以容易溢出</p><h2 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy"></a>strncpy</h2><pre><code class="c">    char *strncpy(char *dest, const char *src, size_t n);</code></pre><p><code>strncpy</code> 把src所指由 <code>\0</code> 结束的字符串的前n个字节复制到dest所指的数组中</p><ul><li>如果src的前n个字节不含 <code>\0</code> 字符，则结果不会以 <code>\0</code> 字符结束，<strong>对dest进行字符串运行会导致出错</strong></li><li>如果src的长度小于n个字节，则以 <code>\0</code> 填充dest直到复制完n个字节，<strong>效率低下</strong></li><li>src和dest所指内存区域不可以重叠且dest必须有足够的空间来容纳src的字符串</li></ul><p><code>strncpy</code> 正确用法</p><pre><code class="c">// solution Achar dest[MAX];strncpy(dest, src, sizeof(dest)-1);dest[MAX-1] = &#39;\0&#39;;// solution Bchar dest[MAX];memset(dest, 0, sizeof(dest));strncpy(dest, src, sizeof(dest)-1);</code></pre><h2 id="正确用法"><a href="#正确用法" class="headerlink" title="正确用法"></a>正确用法</h2><ul><li>通用用法：<code>snprintf</code></li><li>性能用法：<code>memcpy</code></li></ul><h3 id="snprintf"><a href="#snprintf" class="headerlink" title="snprintf"></a>snprintf</h3><pre><code class="c">int snprintf(char *str, size_t size, const char *format, ...);</code></pre><p>使用 <code>snprintf</code> 进行字符串拷贝，防止溢出，<code>snprintf</code> 会把buf的最后一个位置保留为 <code>\0</code></p><pre><code class="c">snprintf(dest, sizeof(dest), &quot;%s&quot;, src);</code></pre><blockquote><p>当 src 长度远大于 dest 时，由于 <code>snprintf</code> 要返回 src 的字节数，需要扫描 src，会产生性能损失</p></blockquote><h3 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h3><pre><code class="c">void *memcpy(void *dest, const void *src, size_t n);</code></pre><p><code>memcpy</code> 提供了一般内存的复制，对于需要复制的内容没有限制。需要考虑字符串拷贝性能时使用 <code>strlen</code> + <code>memcpy</code></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;strcpy&lt;/li&gt;
&lt;li&gt;strncpy&lt;/li&gt;
&lt;li&gt;memcpy&lt;/li&gt;
&lt;li&gt;snprintf&lt;/li&gt;
&lt;li&gt;strlen&lt;/li&gt;
&lt;li&gt;sizeof&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正确无隐患拷贝字符串&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Functions" scheme="http://yoursite.com/categories/C/Functions/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>eCos 组件初始化</title>
    <link href="http://yoursite.com/2020/07/11/ecos-component-initialization/"/>
    <id>http://yoursite.com/2020/07/11/ecos-component-initialization/</id>
    <published>2020-07-11T02:57:29.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>eCos 组件注册及初始化</p><a id="more"></a><h2 id="eCos-组件初始化机制"><a href="#eCos-组件初始化机制" class="headerlink" title="eCos 组件初始化机制"></a>eCos 组件初始化机制</h2><blockquote><p>eCos 组件初始化利用了 C++ 静态对象实例初始化的机制</p></blockquote><p>C++ 对象在初始化时将会调用该对象类的构造函数来初始化对象</p><ul><li>对象在函数内声明，那么函数执行到对象的声明处调用类构造函数来初始化对象</li><li>对象在函数外声明，也就是<strong>将对象声明为全局对象或静态对象</strong>，那么编译器会将该对象的初始化代码地址（函数指针）写到名为 <code>.ctors</code> 节，普通程序在进入 main 函数前由操作系统的运行时库调用存储在 <code>.ctors</code> 中的函数指针列表来初始化全局或静态对象</li></ul><p>eCos HAL将调用 <code>cyg_hal_invoke_constructors</code> 函数，该函数调用存储在 <code>.ctors</code> 节中的初始化代码</p><h2 id="组件初始化"><a href="#组件初始化" class="headerlink" title="组件初始化"></a>组件初始化</h2><p>IO 组件</p><pre><code class="cxx">externC void cyg_io_init(void);class cyg_io_init_class {public:    cyg_io_init_class(void) {        cyg_io_init();    }};// And here&#39;s an instance of the class just to make the code runstatic cyg_io_init_class _cyg_io_init CYGBLD_ATTRIB_INIT_PRI(CYG_INIT_IO);</code></pre><h2 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h2><blockquote><p>初始化过程需要按照一定的次序进行。次序由 <code>CYGBLD_ATTRIB_INIT_PRI</code> 宏指定，该宏带有一个参数，该参数数值越小，那么越早调用该实例的初始化代码</p></blockquote><p>例如 <code>CYGBLD_ATTRIB_INIT_PRI(CYG_INIT_IO)</code> 展开为 <code>__attribute__((init_priority(49000)))</code></p><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><p>组件定义</p><pre><code class="cxx">#define MOD_IRR         cyg_irr_init_class        irr0       CYGBLD_ATTRIB_INIT_PRI( 60100 );</code></pre><h2 id="检查初始化代码"><a href="#检查初始化代码" class="headerlink" title="检查初始化代码"></a>检查初始化代码</h2><p>符号前缀 <code>_GLOBAL__sub_I</code> 表示这是静态对象初始化代码，符号中间部分的数字决定初始化次序</p><pre><code class="shell">$ nm src/out.elf | grep &quot;t _GLOBAL&quot;90039370 t _GLOBAL__D.11000_cyg_scheduler_sched_lock900389a8 t _GLOBAL__D.12000__ZN13Cyg_Interrupt15disable_counterE90070830 t _GLOBAL__D.14000__ZN9Cyg_Clock15real_time_clockE90038704 t _GLOBAL__D.24100__ZN18Cyg_HardwareThread12thread_entryEP10Cyg_Thread904382d8 t _GLOBAL__D.50000_cyg_mtab_extra90045898 t _GLOBAL__D.50000_cyg_nstab_init90044c60 t _GLOBAL__D.50000_cyg_timeval_to_ticks900722b0 t _GLOBAL__D.50000_fdlock90071cc0 t _GLOBAL__D.56000_cyg_libc_stdio_stdin9003c6b0 t _GLOBAL__D.56000_strtok9003ccd8 t _GLOBAL__D.56000__ZN20Cyg_libc_stdio_files5filesE9003d1b8 t _GLOBAL__D.56001_cyg_libc_stdio_stdout90071ba0 t _GLOBAL__D.56002_cyg_libc_stdio_stderr9006b878 t _GLOBAL__D.58000_cyg_timespec_to_ticks9006b5f4 t _GLOBAL__D.58000_pthread_mutex9006bf64 t _GLOBAL__D.58000_signal_mutex90039358 t _GLOBAL__I.11000_cyg_scheduler_sched_lock90038738 t _GLOBAL__I.12000__Z26cyg_null_exception_handlerjij90038998 t _GLOBAL__I.12000__ZN13Cyg_Interrupt15disable_counterE90070818 t _GLOBAL__I.14000__ZN9Cyg_Clock15real_time_clockE900386ec t _GLOBAL__I.24100__ZN18Cyg_HardwareThread12thread_entryEP10Cyg_Thread9006c110 t _GLOBAL__I.32000__ZN12cyg_i2c_initC2Ev90042c38 t _GLOBAL__I.36000__ZN13Cyg_WallClock9wallclockE903e18ec t _GLOBAL__I.48000_char_dev_register90436564 t _GLOBAL__I.49000_ioinit.cxx904382c0 t _GLOBAL__I.50000_cyg_mtab_extra90045880 t _GLOBAL__I.50000_cyg_nstab_init90044c48 t _GLOBAL__I.50000_cyg_timeval_to_ticks90072298 t _GLOBAL__I.50000_fdlock90071ca8 t _GLOBAL__I.56000_cyg_libc_stdio_stdin9003c698 t _GLOBAL__I.56000_strtok9003ccc0 t _GLOBAL__I.56000__ZN20Cyg_libc_stdio_files5filesE9003d1a0 t _GLOBAL__I.56001_cyg_libc_stdio_stdout90071b88 t _GLOBAL__I.56002_cyg_libc_stdio_stderr9006b860 t _GLOBAL__I.58000_cyg_timespec_to_ticks9006b5dc t _GLOBAL__I.58000_pthread_mutex9006bf4c t _GLOBAL__I.58000_signal_mutex903e1100 t _GLOBAL__I.58000_startup.cxx904554ac t _GLOBAL_OFFSET_TABLE_</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;eCos 组件注册及初始化&lt;/p&gt;
    
    </summary>
    
      <category term="eCos" scheme="http://yoursite.com/categories/eCos/"/>
    
    
      <category term="ecos" scheme="http://yoursite.com/tags/ecos/"/>
    
  </entry>
  
  <entry>
    <title>匿名联合体和匿名结构体</title>
    <link href="http://yoursite.com/2020/06/10/anonymous-union-and-anonymous-struct/"/>
    <id>http://yoursite.com/2020/06/10/anonymous-union-and-anonymous-struct/</id>
    <published>2020-06-10T11:52:20.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>编译出错：</p><pre><code>main.c:9:16: error: ‘struct channel::&lt;unnamed union&gt;::dvb’ invalid; an anonymous union can only have non-static data members [-fpermissive]         struct dvb {                ^~~</code></pre><a id="more"></a><h2 id="source-code"><a href="#source-code" class="headerlink" title="source code"></a>source code</h2><pre><code class="c">#include &lt;string.h&gt;struct channel {    int id;    unsigned int services_num;    int *services;    unsigned char delivery;    union {        struct dvb {            int onid;            int tsid;            int sid;        } dvb;        struct ott {            int backendid;            int channelid;        } ott;    };} ch;int main(void){    memset(&amp;ch, 0, sizeof(struct channel));}</code></pre><p>编译</p><pre><code class="bash">$ gcc main.c$ g++ main.cmain.c:9:16: error: ‘struct channel::&lt;unnamed union&gt;::dvb’ invalid; an anonymous union can only have non-static data members [-fpermissive]         struct dvb {                ^~~main.c:15:16: error: ‘struct channel::&lt;unnamed union&gt;::ott’ invalid; an anonymous union can only have non-static data members [-fpermissive]         struct ott {                ^~~$ g++ -fpermissive main.cmain.c:9:16: warning: ‘struct channel::&lt;unnamed union&gt;::dvb’ invalid; an anonymous union can only have non-static data members [-fpermissive]         struct dvb {                ^~~main.c:15:16: warning: ‘struct channel::&lt;unnamed union&gt;::ott’ invalid; an anonymous union can only have non-static data members [-fpermissive]         struct ott {                ^~~</code></pre><h2 id="solutions"><a href="#solutions" class="headerlink" title="solutions"></a>solutions</h2><h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><p>增加编译选项 <code>-fpermissive</code></p><pre><code class="bash">$ gcc main.c$ g++ main.cmain.c:10:16: warning: ‘struct channel::&lt;unnamed union&gt;::dvb’ invalid; an anonymous union can only have non-static data members [-fpermissive]         struct dvb {                ^~~main.c:16:16: warning: ‘struct channel::&lt;unnamed union&gt;::ott’ invalid; an anonymous union can only have non-static data members [-fpermissive]         struct ott {                ^~~</code></pre><h3 id="II"><a href="#II" class="headerlink" title="II"></a>II</h3><p>增加 <code>union</code> 成员 <code>u</code></p><pre><code>struct channel {    int id;    unsigned int services_num;    int *services;    unsigned char delivery;    union {        struct dvb {            int onid;            int tsid;            int sid;        } dvb;        struct ott {            int backendid;            int channelid;        } ott;    } u;} ch;</code></pre><pre><code class="bash">$ gcc main.c$ g++ main.c</code></pre><h3 id="III"><a href="#III" class="headerlink" title="III"></a>III</h3><p>修改匿名 <code>union</code> 内部结构体为匿名</p><pre><code>struct channel {    int id;    unsigned int services_num;    int *services;    unsigned char delivery;    union {        struct {            int onid;            int tsid;            int sid;        };        struct {            int backendid;            int channelid;        };    };} ch;</code></pre><p>或者</p><pre><code>struct channel {    int id;    unsigned int services_num;    int *services;    unsigned char delivery;    union {        struct {            int onid;            int tsid;            int sid;        } dvb;        struct {            int backendid;            int channelid;        } ott;    };} ch;</code></pre><pre><code class="bash">$ gcc main.c$ g++ main.c</code></pre><h3 id="IV"><a href="#IV" class="headerlink" title="IV"></a>IV</h3><p>修改为如下同样存在问题，这种方式是一种错误，定义了 <code>struct dvb</code> 类型，但是没有定义属于该类型的任何对象</p><pre><code>struct channel {    int id;    unsigned int services_num;    int *services;    unsigned char delivery;    union {        struct dvb {            int onid;            int tsid;            int sid;        };        struct ott {            int backendid;            int channelid;        };    };} ch;</code></pre><pre><code class="bash">$ gcc main.cmain.c:13:10: warning: declaration does not declare anything         };          ^main.c:18:10: warning: declaration does not declare anything         };          ^$ g++ main.cmain.c:9:16: error: ‘struct channel::&lt;unnamed union&gt;::dvb’ invalid; an anonymous union can only have non-static data members [-fpermissive]         struct dvb {                ^~~main.c:15:16: error: ‘struct channel::&lt;unnamed union&gt;::ott’ invalid; an anonymous union can only have non-static data members [-fpermissive]         struct ott {                ^~~</code></pre><h2 id="C-union-特点"><a href="#C-union-特点" class="headerlink" title="C++ union 特点"></a>C++ <code>union</code> 特点</h2><blockquote><p>C++ 联合体中不能包含非基本类型成员变量，原因好像是因为非基本类型存在构造函数（包括默认构造函数）为了避免多层嵌套后结构的安全性</p></blockquote><p>C++ 中 <code>union</code> 里面需要的成员需要共享内存，因此<strong>静态</strong>和<strong>引用</strong>都不能用，因为他们不可能共享内存</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://www.javatt.com/p/37232" target="_blank" rel="noopener">例解 C 语言中的匿名联合体和匿名结构体</a></li><li><a href="https://en.it1352.com/article/e4fdc90b62f14d0abaf6f46a4f4ea97e.html" target="_blank" rel="noopener">anonymous union can only have non-static data members GCC c</a></li><li><a href="https://stackoverflow.com/questions/17637392/anonymous-union-can-only-have-non-static-data-members-gcc-c" target="_blank" rel="noopener">anonymous union can only have non-static data members GCC c++</a></li><li><a href="https://stackoverflow.com/questions/2253878/why-does-c-disallow-anonymous-structs" target="_blank" rel="noopener">Why does C++ disallow anonymous structs?</a></li><li><a href="https://stackoverflow.com/questions/25542390/anonymous-union-and-struct" target="_blank" rel="noopener">Anonymous union and struct</a></li><li><a href="https://www.cnblogs.com/LubinLew/p/struct_enum_union_in_cpp.html" target="_blank" rel="noopener">C++对C语言的结构、联合、枚举 这3种数据类型进行了扩展</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编译出错：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;main.c:9:16: error: ‘struct channel::&amp;lt;unnamed union&amp;gt;::dvb’ invalid; an anonymous union can only have non-static data members [-fpermissive]
         struct dvb {
                ^~~&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="GCC" scheme="http://yoursite.com/categories/C/GCC/"/>
    
    
      <category term="union" scheme="http://yoursite.com/tags/union/"/>
    
      <category term="struct" scheme="http://yoursite.com/tags/struct/"/>
    
  </entry>
  
  <entry>
    <title>Pandas 数据选择</title>
    <link href="http://yoursite.com/2020/06/05/pandas-data-selection/"/>
    <id>http://yoursite.com/2020/06/05/pandas-data-selection/</id>
    <published>2020-06-05T02:17:48.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>Pandas 数据选择</p><ul><li><code>.loc</code> <code>.iloc</code></li><li><code>.at</code> <code>.iat</code></li><li><code>[]</code></li><li><code>.attr</code></li></ul><a id="more"></a><p><a href="https://www.pypandas.cn/docs/user_guide/indexing.html#%E7%B4%A2%E5%BC%95%E7%9A%84%E4%B8%8D%E5%90%8C%E9%80%89%E6%8B%A9" target="_blank" rel="noopener">索引的不同选择</a></p><blockquote><p>标量：相对于矢量，只有大小没有方向的数值。比如 39.343434<br>向量：矢量，既有方向，也有大小的一组数值。数据表里的一行数据，或者一列数据都可以是向量。比如 DataFrame 中的一行或者一列</p></blockquote><h2 id="loc"><a href="#loc" class="headerlink" title=".loc"></a><code>.loc</code></h2><p><a href="https://www.pypandas.cn/docs/user_guide/indexing.html#%E6%8C%89%E6%A0%87%E7%AD%BE%E9%80%89%E6%8B%A9" target="_blank" rel="noopener">按标签选择</a></p><blockquote><p><code>loc</code> 返回对象降维，<code>dataframe</code> -&gt; <code>series</code> -&gt; <code>标量</code><br>切片端点包含</p></blockquote><p>不同对象类型：</p><ul><li>series: <code>s.loc[indexer]</code></li><li>dataframe: <code>df.loc[row_indexer,column_indexer]</code></li></ul><p>常用方式：</p><ul><li><code>df.loc[&#39;a&#39;]</code><blockquote><p><code>a</code> 为 index label，此处输入不是索引的整数位置</p></blockquote></li><li><code>df.loc[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]</code></li><li><code>df.loc[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], :]</code></li><li><code>df.loc[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;A&#39;:]]</code></li><li><code>s.loc[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]</code></li><li><code>df.loc[&#39;b&#39;:]</code></li><li><code>df.loc[&#39;b&#39;:&#39;d&#39;]</code><blockquote><p>包括行 <code>b</code> 和 <code>d</code></p></blockquote></li><li><code>df.loc[:, &#39;B&#39;:&#39;D&#39;]</code></li><li><code>df.loc[:, [&#39;B&#39;, &#39;D&#39;]]</code></li><li><code>df.loc[df.A &gt; 0]</code></li><li><code>df.loc[df.index.isin([&#39;a&#39;, &#39;b&#39;])]</code></li><li><code>df.loc[df.index == &#39;a&#39;]</code></li><li><code>df.loc[(df[&#39;date&#39;] &gt; &#39;2019-12&#39;) &amp; (df[&#39;date&#39;] &lt; &#39;2020-05&#39;)]</code></li><li><code>df.loc[lambda x: x[&#39;date&#39;] &gt; &#39;2019-12&#39;]</code></li><li><code>df.loc[:, lambda df: [&#39;A&#39;, &#39;B&#39;]]</code></li></ul><h2 id="iloc"><a href="#iloc" class="headerlink" title=".iloc"></a><code>.iloc</code></h2><p><a href="https://www.pypandas.cn/docs/user_guide/indexing.html#%E6%8C%89%E4%BD%8D%E7%BD%AE%E9%80%89%E6%8B%A9" target="_blank" rel="noopener">按位置选择</a></p><blockquote><p><code>iloc</code> 返回对象降维，<code>dataframe</code> -&gt; <code>series</code> -&gt; <code>标量</code><br>切片时，开始包括，而上限是排除<br>纯粹基于整数</p></blockquote><p>不同对象类型：</p><ul><li>series: <code>s.iloc[indexer]</code></li><li>dataframe: <code>df.iloc[row_indexer,column_indexer]</code></li></ul><p>常用方式：</p><ul><li><code>df.iloc[3]</code></li><li><code>df.iloc[1, 1]</code></li><li><code>df.iloc[[3, 4, 5]]</code></li><li><code>df.iloc[[3, 4, 5], :]</code></li><li><code>df.iloc[4:]</code></li><li><code>df.iloc[4:5]</code><blockquote><p>包含行4，不包含行5</p></blockquote></li><li><code>df.iloc[:, 4:5]</code></li><li><code>df.iloc[:, [4, 5]]</code></li><li><code>df.iloc[[1, 3, 5], [1, 3]]</code></li><li><code>df.iloc[[1, 3, 5], [1:3]]</code></li><li><code>df.iloc[list(df.A&lt;0)]</code> 或 <code>df.iloc[np.array(df.A&lt;0)]</code></li><li><code>df.iloc[df.index.isin([&#39;a&#39;, &#39;c&#39;])]</code></li><li><code>df.loc[df.index == &#39;a&#39;]</code></li><li><code>df.iloc[:, lambda df: [0, 1]]</code></li></ul><h2 id="at-和-iat"><a href="#at-和-iat" class="headerlink" title=".at 和 .iat"></a><code>.at</code> 和 <code>.iat</code></h2><p><a href="https://www.pypandas.cn/docs/user_guide/indexing.html#%E5%BF%AB%E9%80%9F%E6%A0%87%E9%87%8F%E5%80%BC%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">快速标量值获取和设置</a></p><p><code>at</code> 提供基于标签的标量查找，同时 <code>iat</code> 提供类似于基于整数的查找 <code>iloc</code></p><ul><li><code>df.at[&#39;b&#39;, &#39;B&#39;]</code></li><li><code>df.iat[1, 1]</code></li></ul><h2 id=""><a href="#" class="headerlink" title="[]"></a><code>[]</code></h2><p><strong>只能输入一个维度，不能用逗号隔开输入两个维度</strong></p><p>切片操作，语法与 ndarray 完全一样，返回值的一部分和相应的标签</p><ul><li><code>s[:5]</code></li><li><code>s[::-1]</code></li><li><code>s[::2]</code></li><li><code>df[:3]</code></li><li><code>df[2:3]</code></li><li><code>df[::-1]</code></li><li><code>df[[&#39;A&#39;, &#39;B&#39;, &#39;D&#39;]]</code></li><li><code>df[&#39;A&#39;]</code></li><li><code>df[df.A&lt;0]</code></li></ul><h2 id="attr"><a href="#attr" class="headerlink" title=".attr"></a><code>.attr</code></h2><p>用于访问列</p><ul><li><code>df.A</code></li></ul><h2 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h2><p><strong>必须使用括号进行分组</strong></p><ul><li><code>|</code></li><li><code>&amp;</code></li><li><code>~</code></li></ul><p>例如：</p><ul><li><code>s[(s &lt; -1) | (s &gt; 0.5)]</code></li><li><code>s[~(s &lt; 0)]</code></li></ul><h2 id="isin"><a href="#isin" class="headerlink" title="isin"></a><code>isin</code></h2><p><a href="https://www.pypandas.cn/docs/user_guide/indexing.html#%E4%BD%BF%E7%94%A8isin%E8%BF%9B%E8%A1%8C%E7%B4%A2%E5%BC%95" target="_blank" rel="noopener">使用isin进行索引</a></p><ul><li><code>s.isin([2, 4, 6])</code></li><li><code>s[s.index.isin([2, 4, 6])]</code></li><li><code>s_mi.iloc[s_mi.index.isin([(1, &#39;a&#39;), (2, &#39;b&#39;), (0, &#39;c&#39;)])]</code></li></ul><h2 id="where"><a href="#where" class="headerlink" title="where"></a><code>where</code></h2><p><a href="https://www.pypandas.cn/docs/user_guide/indexing.html#%E8%AF%A5where-%E6%96%B9%E6%B3%95%E5%92%8C%E5%B1%8F%E8%94%BD" target="_blank" rel="noopener">该where()方法和屏蔽</a></p><p><code>where</code> 保证选择输出与原始数据具有相同的形状</p><pre><code class="python">In [16]: s                                                                                                                                              Out[16]: 4    03    12    21    30    4dtype: int64In [17]: s[s &gt; 2]                                                                                                                                       Out[17]: 1    30    4dtype: int64In [18]: s.where(s &gt; 2)                                                                                                                                 Out[18]: 4    NaN3    NaN2    NaN1    3.00    4.0dtype: float64</code></pre><h2 id="query"><a href="#query" class="headerlink" title="query"></a><code>query</code></h2><p><a href="https://www.pypandas.cn/docs/user_guide/indexing.html#%E8%AF%A5query-%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">该query()方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pandas 数据选择&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.loc&lt;/code&gt; &lt;code&gt;.iloc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.at&lt;/code&gt; &lt;code&gt;.iat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.attr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="Pandas" scheme="http://yoursite.com/categories/Python/Pandas/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>查找指定 commit 之间修改文件列表</title>
    <link href="http://yoursite.com/2020/05/18/git-diff-between-commits-in-git/"/>
    <id>http://yoursite.com/2020/05/18/git-diff-between-commits-in-git/</id>
    <published>2020-05-18T11:20:28.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>git diff</code> 查看指定 commit 之间修改文件列表</p><a id="more"></a><p>使用 <a href="https://github.com.cnpmjs.org/jingweno/ccat.git" target="_blank" rel="noopener">ccat</a> 为例</p><pre><code>$ git diff --name-only &lt;SHA, tag start&gt; &lt;SHA, tag end&gt;$ git diff --name-status &lt;SHA, tag start&gt; &lt;SHA, tag end&gt;</code></pre><pre><code class="shell">$ git diff --name-only 561b2d4 7cf6d90.travis.ymlREADME.mdcompletion/zsh/_ccat$ git diff --name-status 561b2d4 7cf6d90M       .travis.ymlM       README.mdA       completion/zsh/_ccat</code></pre><p>然后查看文件的具体改动</p><pre><code class="shell">$ git diff 561b2d4 7cf6d90 .travis.ymldiff --git a/.travis.yml b/.travis.ymlindex e4fed32..008ab1c 100644--- a/.travis.yml+++ b/.travis.yml@@ -1,5 +1,8 @@ sudo: false language: go go:-  - 1.8.3+  - 1.8.x+  - 1.9.x+  - 1.10.x+  - 1.11.x script: ./bin/test</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;git diff&lt;/code&gt; 查看指定 commit 之间修改文件列表&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Git" scheme="http://yoursite.com/categories/Tools/Git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git 带有参数的别名</title>
    <link href="http://yoursite.com/2020/05/12/git-advanced-aliases-with-arguments/"/>
    <id>http://yoursite.com/2020/05/12/git-advanced-aliases-with-arguments/</id>
    <published>2020-05-12T01:38:13.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>git 别名以及使用参数相关注意事项</p><a id="more"></a><h2 id="Aliases"><a href="#Aliases" class="headerlink" title="Aliases"></a>Aliases</h2><p><a href="https://git.wiki.kernel.org/index.php/Aliases#Advanced_aliases_with_arguments" target="_blank" rel="noopener">Aliases</a></p><p>git 别名配置在文件 <code>~/.gitconfig</code> 中，存在两种别名</p><ol><li>git 命令别名，内置命令</li><li>非 git 命令别名，使用前缀<code>!</code>，运行在 shell</li></ol><pre><code>[alias]    ci = commit    br = branch    push-view = !sh -c &#39;git origin HEAD:refs/for/$1&#39; -    gitkconflict = !gitk --left-right HEAD...MERGE_HEAD</code></pre><h2 id="Advanced-aliases-with-parameters"><a href="#Advanced-aliases-with-parameters" class="headerlink" title="Advanced aliases with parameters"></a>Advanced aliases with parameters</h2><blockquote><p>Starting with version 1.5.3, git supports appending the arguments to commands prefixed with “!”, too. If you need to perform a reordering, or to use an argument twice, you can use this trick:</p></blockquote><pre><code>[alias]    example = !sh -c &#39;ls $2 $1&#39; -</code></pre><ul><li><code>!</code> 在 shell 中运行</li><li><code>$1</code> 为第一个参数</li></ul><p>另外一种方式，封装为 <code>bash</code> 函数 <code>f</code>：</p><pre><code>[alias]    files = &quot;!f() { git diff --name-status \&quot;$1^\&quot; \&quot;$1\&quot;; }; f&quot;</code></pre><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>调试输出信息</p><pre><code>$ GIT_TRACE=1 git push-view test</code></pre><p>或者使用 <code>gdb</code> 调试</p><pre><code>[alias]    debug = !GIT_PAGER= gdb --args git</code></pre><p>用法 <code>git debug push-view test</code></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>定义 gerrit review alias 为</p><pre><code>[alias]  ...  push-for-review = push origin HEAD:refs/for/master  push-for-review-branch = !git push origin HEAD:refs/for/$1  push-as-draft = push origin HEAD:refs/drafts/master  push-as-draft-branch = !git push origin HEAD:refs/drafts/$1  ...</code></pre><p>调试如下</p><pre><code class="shell">$ GIT_TRACE=1 git push-for-review-branch test16:38:33.280667 git.c:344               trace: built-in: git push origin HEAD:refs/for/test testTo ssh://192.168.110.254:29418/misc   d9d506f..20c5d70  test -&gt; test * [new branch]      HEAD -&gt; refs/for/test</code></pre><p>尾巴上多出一个参数导致直接合并，不理解为什么？<code>$@</code> 解析问题？<br><a href="https://stackoverflow.com/questions/3321492/git-alias-with-positional-parameters" target="_blank" rel="noopener">stackoverflow - Git alias with positional parameters</a>解释如下</p><blockquote><p>The sh -c ‘..’ – and f() {..}; f options both cleanly handle the “$@” parameters in different ways (see with GIT_TRACE). Appending “#” to an alias would also allow positional parameters without leaving the trailing ones.</p></blockquote><p>修改为</p><pre><code>[alias]  ...  push-for-review = push origin HEAD:refs/for/master  push-for-review-branch = &quot;!git push origin HEAD:refs/for/$1 #&quot;  push-as-draft = push origin HEAD:refs/drafts/master  push-as-draft-branch = &quot;!git push origin HEAD:refs/drafts/$1 #&quot;  ...</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git 别名以及使用参数相关注意事项&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Git" scheme="http://yoursite.com/categories/Tools/Git/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="alias" scheme="http://yoursite.com/tags/alias/"/>
    
  </entry>
  
  <entry>
    <title>基于 coc.nvim python 补全</title>
    <link href="http://yoursite.com/2020/05/08/coc-python-completion/"/>
    <id>http://yoursite.com/2020/05/08/coc-python-completion/</id>
    <published>2020-05-08T05:35:57.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>coc.nvim</code> 配置 python 补全</p><ul><li>coc-jedi</li><li>coc-python <em>配置失败</em></li><li>python LSP <em>配置失败</em></li></ul><a id="more"></a><h2 id="python-LSP"><a href="#python-LSP" class="headerlink" title="python LSP"></a>python LSP</h2><ul><li><a href="https://github.com/neoclide/coc.nvim/wiki/Language-servers" target="_blank" rel="noopener">Python LS</a></li><li><a href="https://github.com/palantir/python-language-server" target="_blank" rel="noopener">python-language-server</a></li></ul><p>需要配置 <code>coc-settings.json</code></p><p><strong>LSP重启5次失败</strong></p><h2 id="coc-python"><a href="#coc-python" class="headerlink" title="coc-python"></a>coc-python</h2><p><strong>推荐使用</strong>，<code>coc-settings.json</code> 中不能配置 <code>LSP</code></p><ul><li><a href="https://github.com/neoclide/coc.nvim/wiki/Language-servers" target="_blank" rel="noopener">Python LS</a></li><li><a href="https://github.com/neoclide/coc-python" target="_blank" rel="noopener">coc-python</a></li></ul><p>支持两种：</p><ol><li>jedi (工作不正常)</li><li>MPLS (网络原因，不能正常下载)</li></ol><h2 id="coc-jedi"><a href="#coc-jedi" class="headerlink" title="coc-jedi"></a>coc-jedi</h2><ul><li><a href="https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions" target="_blank" rel="noopener">coc-extensions</a></li><li><a href="https://github.com/pappasam/coc-jedi" target="_blank" rel="noopener">coc-jedi</a></li><li><a href="https://github.com/pappasam/jedi-language-server" target="_blank" rel="noopener">jedi-language-server</a></li></ul><p><strong>与 <code>coc-python</code> 冲突，需要先卸载</strong>，基于 <code>jedi-language-server</code></p><pre><code class="shell">$ python3 -m pip install --user pipx$ pipx install jedi-language-server</code></pre><p><code>coc-settings.json</code> 配置如下</p><pre><code class="json">  &quot;jedi.enable&quot;: true,  &quot;jedi.trace.server&quot;: &quot;messages&quot;,  &quot;jedi.diagnostics.enable&quot;: true,  &quot;jedi.diagnostics.didOpen&quot;: true,  &quot;jedi.diagnostics.didChange&quot;: true,  &quot;jedi.diagnostics.didSave&quot;: true</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;coc.nvim&lt;/code&gt; 配置 python 补全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coc-jedi&lt;/li&gt;
&lt;li&gt;coc-python &lt;em&gt;配置失败&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;python LSP &lt;em&gt;配置失败&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Editor" scheme="http://yoursite.com/categories/Tools/Editor/"/>
    
    
      <category term="lsp" scheme="http://yoursite.com/tags/lsp/"/>
    
      <category term="coc" scheme="http://yoursite.com/tags/coc/"/>
    
      <category term="jedi" scheme="http://yoursite.com/tags/jedi/"/>
    
  </entry>
  
  <entry>
    <title>GDB Tips</title>
    <link href="http://yoursite.com/2020/05/07/gdb-ptype/"/>
    <id>http://yoursite.com/2020/05/07/gdb-ptype/</id>
    <published>2020-05-07T08:46:48.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>GDB 使用技巧</p><ul><li>启动</li><li>dump</li><li>ptype</li><li>set</li><li>info</li><li>disassemble</li></ul><a id="more"></a><h2 id="启动GDB"><a href="#启动GDB" class="headerlink" title="启动GDB"></a>启动GDB</h2><p>默认读取当前目录下的 <code>.gdbinit</code>，使用 <code>-nx</code>不读取 <code>.gdbinit</code> 配置</p><pre><code class="shell">$ gdb test # 常用于下载调试test$ gdb -nx test # 常用于查看当前状态</code></pre><h2 id="独立调试信息记载"><a href="#独立调试信息记载" class="headerlink" title="独立调试信息记载"></a>独立调试信息记载</h2><p><code>test</code> 编译参数为 <code>-O0 -g -ggdb</code></p><ul><li>获取调试信息 <code>objcopy --only-keep-debug test test.debug</code></li><li>gdb 中加载 <code>symbol-file test.debug</code></li><li>分离的调试信息重新链接到可执行问题 <code>objcopy --add-gnu-debuglink test.debug test</code></li></ul><h2 id="Dump-Memory"><a href="#Dump-Memory" class="headerlink" title="Dump Memory"></a>Dump Memory</h2><pre><code class="gdb">(gdb) help dumpDump target code/data to a local file.List of dump subcommands:dump binary -- Write target code/data to a raw binary filedump ihex -- Write target code/data to an intel hex filedump memory -- Write contents of memory to a raw binary filedump srec -- Write target code/data to an srec filedump tekhex -- Write target code/data to a tekhex filedump value -- Write the value of an expression to a raw binary filedump verilog -- Write target code/data to a verilog hex fileType &quot;help dump&quot; followed by dump subcommand name for full documentation.Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.Command name abbreviations are allowed if unambiguous.(gdb) help dump memoryWrite contents of memory to a raw binary file.Arguments are FILE START STOP.  Writes the contents of memory within therange [START .. STOP) to the specified FILE in raw target ordered bytes.</code></pre><p>语法 <code>dump memory file $START $END</code></p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><ul><li><code>b *func</code> 断点在 <code>func</code> 入栈之前</li><li><code>ni/si</code> 汇编指令级单步执行</li><li><code>disassemble func</code> 反汇编 func</li><li><code>disassemble /m func</code> 反汇编 func，带有源代码信息</li><li><code>disassemble $pc-20,$pc+20</code> 反汇编执行区间代码</li><li><code>watch *(int *)0x8049aa4</code> 内存读写断点</li><li><code>rwatch *(int *)0x8049aa4</code> 内存读断点</li><li><code>awatch *(int *)0x8049aa4</code> 内存读写断点</li><li><code>display /i $pc</code> 显示当前汇编指令</li><li><code>info r</code> 查看寄存器</li><li><code>i r rx</code> 查看rx寄存器</li></ul><h2 id="ptype-查看类型"><a href="#ptype-查看类型" class="headerlink" title="ptype 查看类型"></a>ptype 查看类型</h2><p>用于查看符号类型 <code>ptype symbol|var</code></p><pre><code class="gdb">(gdb) ptype struct filetype = struct file {    cyg_uint32 f_flag;    cyg_uint16 f_ucount;    cyg_uint16 f_type;    cyg_uint32 f_syncmode;    fileops *f_ops;    off_t f_offset;    CYG_ADDRWORD f_data;    CYG_ADDRWORD f_xops;    cyg_mtab_entry *f_mte;    list_head f_node;    cyg_uint8 f_valid;}</code></pre><p>使用 <code>set print type xxx</code> 配置</p><h2 id="whatis-查看类型"><a href="#whatis-查看类型" class="headerlink" title="whatis 查看类型"></a>whatis 查看类型</h2><p><code>whatis var</code></p><h2 id="info-address"><a href="#info-address" class="headerlink" title="info address"></a>info address</h2><p><code>info address symbol</code></p><blockquote><p>Describe where the data for symbol is stored. For a register variable, this says which register it is kept in. For a non-register local variable, this prints the stack-frame offset at which the variable is always stored.</p></blockquote><p>查找给定符号的存储地址</p><h2 id="info-symbol"><a href="#info-symbol" class="headerlink" title="info symbol"></a>info symbol</h2><p><code>info symbol addr</code></p><blockquote><p>Print the name of a symbol which is stored at the address addr. If no symbol is stored exactly at addr, GDB prints the nearest symbol and an offset from it</p><pre><code class="gdb">(gdb) info symbol 0x54320_initialize_vx + 396 in section .text</code></pre></blockquote><p>查找给定地址的变量或函数的名称</p><h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h2><ol><li><a href="https://www.cnblogs.com/zengkefu/p/5618041.html" target="_blank" rel="noopener">GDB技巧整理</a></li><li><a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Symbols.html" target="_blank" rel="noopener">16 Examining the Symbol Table</a></li><li><a href="https://stackoverflow.com/questions/866721/how-to-generate-gcc-debug-symbol-outside-the-build-target" target="_blank" rel="noopener">How to generate gcc debug symbol outside the build target?</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GDB 使用技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动&lt;/li&gt;
&lt;li&gt;dump&lt;/li&gt;
&lt;li&gt;ptype&lt;/li&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;li&gt;info&lt;/li&gt;
&lt;li&gt;disassemble&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="GDB" scheme="http://yoursite.com/categories/Tools/GDB/"/>
    
    
      <category term="gdb" scheme="http://yoursite.com/tags/gdb/"/>
    
      <category term="ptype" scheme="http://yoursite.com/tags/ptype/"/>
    
  </entry>
  
  <entry>
    <title>ddd调试嵌入式系统</title>
    <link href="http://yoursite.com/2020/05/07/ddd-with-cross-debugger/"/>
    <id>http://yoursite.com/2020/05/07/ddd-with-cross-debugger/</id>
    <published>2020-05-07T08:25:26.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="0"><a href="#0" class="headerlink" title="0"></a>0</h2><p>后台启动 <code>gdbserver</code></p><h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><pre><code class=".gdbinit">set $cr18=0x7dhandle SIGPIPE nostopset print pretty</code></pre><pre><code class="shell">$ ddd --debugger arm-linux-gnueabihf-gdb output/out.elf</code></pre><p>启动之后执行</p><pre><code class="gdb">tar jtag jtag://127.0.1.1:1025loadr</code></pre><h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h2><ol><li><a href="https://blog.51cto.com/mirage1993/1750756" target="_blank" rel="noopener">宇宙最强调试器DDD</a></li><li><a href="https://www.shuzhiduo.com/A/A7zg83MoJ4/" target="_blank" rel="noopener">DDD——让天下没有难调的程序</a></li><li><a href="http://www.dilnetpc.com/mHT5280-14.pdf" target="_blank" rel="noopener">How to use the DDD on the top of the GNU Cross Debugger</a></li><li><a href="https://www.gnu.org/software/ddd/" target="_blank" rel="noopener">DDD</a></li><li><a href="https://sourceware.org/gdb/wiki/GDB%20Front%20Ends" target="_blank" rel="noopener">GDB front ends and other tools</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;0&quot;&gt;&lt;a href=&quot;#0&quot; class=&quot;headerlink&quot; title=&quot;0&quot;&gt;&lt;/a&gt;0&lt;/h2&gt;&lt;p&gt;后台启动 &lt;code&gt;gdbserver&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;I&quot;&gt;&lt;a href=&quot;#I&quot;
      
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="GDB" scheme="http://yoursite.com/categories/Tools/GDB/"/>
    
    
      <category term="gdb" scheme="http://yoursite.com/tags/gdb/"/>
    
      <category term="ddd" scheme="http://yoursite.com/tags/ddd/"/>
    
  </entry>
  
  <entry>
    <title>GDB打印二维数组</title>
    <link href="http://yoursite.com/2020/05/07/print-2d-array-in-gdb/"/>
    <id>http://yoursite.com/2020/05/07/print-2d-array-in-gdb/</id>
    <published>2020-05-07T04:50:37.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<ul><li>打印数组 <code>p *matrix@length</code></li><li>打印二维数组 <code>p *matrix@cols@rows</code></li><li>打印二维数组 <code>printMatrix matrix cols rows</code><pre><code>define printMatrix  set $arr = $arg0  set $rows = $arg1  set $cols = $arg2  set $i = 0  printf &quot;\n&quot;  while $i &lt; $rows      set $j = 0      while $j &lt; $cols          printf &quot;%02d, &quot;,$arr[$i][$j]          set $j = $j + 1      end      printf &quot;\n&quot;      set $i = $i + 1  endend</code></pre></li></ul><a id="more"></a><h2 id="source-code"><a href="#source-code" class="headerlink" title="source code"></a>source code</h2><pre><code class="c">#include &lt;stdio.h&gt;int matrix[10][10];void print(int matrix[10][10]){    int i, j;    for (i = 0; i &lt; 10; ++i)    {        for (j = 0; j &lt; 10; ++j)            printf(&quot;%d &quot;, matrix[i][j]);        printf(&quot;\n&quot;);    }}int main(){    int i, j;    for (i = 0; i &lt; 10; ++i)        for (j = 0; j &lt; 10; ++j)            matrix[i][j] = i*10 + j;    return 0;}</code></pre><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><pre><code>(gdb) p *matrix[1]@10$6 = {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}(gdb) p *matrix[1]@5@2$7 = {{10, 11, 12, 13, 14}, {15, 16, 17, 18, 19}}(gdb) source a.gdb(gdb) printMatrix matrix 10 1000, 01, 02, 03, 04, 05, 06, 07, 08, 09,10, 11, 12, 13, 14, 15, 16, 17, 18, 19,20, 21, 22, 23, 24, 25, 26, 27, 28, 29,30, 31, 32, 33, 34, 35, 36, 37, 38, 39,40, 41, 42, 43, 44, 45, 46, 47, 48, 49,50, 51, 52, 53, 54, 55, 56, 57, 58, 59,60, 61, 62, 63, 64, 65, 66, 67, 68, 69,70, 71, 72, 73, 74, 75, 76, 77, 78, 79,80, 81, 82, 83, 84, 85, 86, 87, 88, 89,90, 91, 92, 93, 94, 95, 96, 97, 98, 99,</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;打印数组 &lt;code&gt;p *matrix@length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打印二维数组 &lt;code&gt;p *matrix@cols@rows&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打印二维数组 &lt;code&gt;printMatrix matrix cols rows&lt;/code&gt;&lt;pre&gt;&lt;code&gt;define printMatrix
  set $arr = $arg0
  set $rows = $arg1
  set $cols = $arg2
  set $i = 0
  printf &amp;quot;\n&amp;quot;
  while $i &amp;lt; $rows
      set $j = 0
      while $j &amp;lt; $cols
          printf &amp;quot;%02d, &amp;quot;,$arr[$i][$j]
          set $j = $j + 1
      end
      printf &amp;quot;\n&amp;quot;
      set $i = $i + 1
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="GDB" scheme="http://yoursite.com/categories/Tools/GDB/"/>
    
    
      <category term="gdb" scheme="http://yoursite.com/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>GDB扩展脚本</title>
    <link href="http://yoursite.com/2020/05/07/Extending-GDB/"/>
    <id>http://yoursite.com/2020/05/07/Extending-GDB/</id>
    <published>2020-05-07T03:10:39.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>GDB 扩展</p><ul><li>GDB Commands</li><li>python script</li></ul><a id="more"></a><h2 id="GDB-脚本"><a href="#GDB-脚本" class="headerlink" title="GDB 脚本"></a>GDB 脚本</h2><p><a href="https://sourceware.org/gdb/onlinedocs/gdb/Sequences.html#Sequences" target="_blank" rel="noopener">Canned Sequences of Commands</a><br><a href="https://github.com/gdbinit/Gdbinit/blob/master/gdbinit" target="_blank" rel="noopener">Gdbinit</a></p><p>在 <code>.gdbinit</code> 中增加如下代码自定义函数</p><pre><code>define print_list    set $list=$arg0    while($list)        printf &quot;%d\t&quot;,$list-&gt;val        set $list=$list-&gt;next    end    printf &quot;\n&quot;enddocument print_listSyntax: print_list listend</code></pre><h2 id="Python-脚本"><a href="#Python-脚本" class="headerlink" title="Python 脚本"></a>Python 脚本</h2><p><a href="https://sourceware.org/gdb/onlinedocs/gdb/Python.html#Python" target="_blank" rel="noopener">Extending GDB using Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GDB 扩展&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GDB Commands&lt;/li&gt;
&lt;li&gt;python script&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="GDB" scheme="http://yoursite.com/categories/Tools/GDB/"/>
    
    
      <category term="gdb" scheme="http://yoursite.com/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>gerrit命名空间</title>
    <link href="http://yoursite.com/2020/05/07/gerrit-namespace/"/>
    <id>http://yoursite.com/2020/05/07/gerrit-namespace/</id>
    <published>2020-05-07T01:21:04.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>Gerrit 命名空间 <code>refs/for/&lt;branch&gt;</code> 用于代码评审，以及相关 alias</p><a id="more"></a><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><p>Branches, remote-tracking branches, and tags 等等都是对 commite 的引用（reference），引用都以 <code>refs/...</code>”表示</p><ul><li>remote branch: origin/git_int(=refs/remotes/origin/git_int)</li><li>local tag: v2.0(=refs/tags/v2.0)</li><li>local branch: git_int(=refs/heads/git_int)</li></ul><h2 id="refs-for"><a href="#refs-for" class="headerlink" title="refs/for"></a>refs/for</h2><p><code>refs/for/&lt;branch&gt;</code> 用于 gerrit 代码评审</p><blockquote><p>Gerrit uses the <strong>refs/for/</strong> prefix to map the concept of “Pushing for Review” to the git protocol.</p></blockquote><p>git 命令 <code>git push origin HEAD:refs/for/&lt;BRANCH_NAME&gt;</code></p><h2 id="refs-changes"><a href="#refs-changes" class="headerlink" title="refs/changes"></a>refs/changes</h2><p>提交到 gerrit 的代码如下格式</p><blockquote><p>For the git client, it looks like every push goes to the same branch, such as refs/for/master. In fact, for each commit pushed to this ref, Gerrit creates a new ref under a refs/changes/ namespace, which Gerrit uses to track these commits. These references use the following format: refs/changes/[CD]/[ABCD]/[EF]</p></blockquote><ul><li>[CD] is the last two digits of the change number</li><li>[ABCD] is the change number</li><li>[EF] is the patch set number</li></ul><h2 id="refs-head"><a href="#refs-head" class="headerlink" title="refs/head"></a>refs/head</h2><p><code>refs/head/&lt;branch&gt;</code> 用于绕过评审直接提交代码，可能会因为权限控制导致提交失败</p><pre><code>! [remote rejected] master -&gt; master (prohibited by Gerrit)</code></pre><p>git 命令 <code>git push origin &lt;BRANCH_NAME&gt;</code></p><h2 id="refs-drafts"><a href="#refs-drafts" class="headerlink" title="refs/drafts"></a>refs/drafts</h2><p>草稿箱，仅 owner 以及邀请用户可见</p><pre><code>git push origin HEAD:refs/drafts/&lt;BRANCH_NAME&gt;</code></pre><h2 id="git-alias"><a href="#git-alias" class="headerlink" title="git alias"></a>git alias</h2><pre><code>[alias]  ...  push-for-review = push origin HEAD:refs/for/master  push-for-review-branch = !git push origin HEAD:refs/for/$1  push-as-draft = push origin HEAD:refs/drafts/master  push-as-draft-branch = !git push origin HEAD:refs/drafts/$1  ...</code></pre><blockquote><p>两个携带参数的 alias 存在问题，git version 2.17.1<br>git push-for-review-branch test 展开为 git push origin HEAD:refs/for/test test，多了一个参数导致直接合并到git仓库中</p></blockquote><pre><code class="shell">$ GIT_TRACE=1 git push-for-review-branch testTo ssh://192.168.110.254:29418/misc   d9d506f..20c5d70  test -&gt; test * [new branch]      HEAD -&gt; refs/for/test</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gerrit 命名空间 &lt;code&gt;refs/for/&amp;lt;branch&amp;gt;&lt;/code&gt; 用于代码评审，以及相关 alias&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Gerrit" scheme="http://yoursite.com/categories/Tools/Gerrit/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="gerrit" scheme="http://yoursite.com/tags/gerrit/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 安装与配置</title>
    <link href="http://yoursite.com/2020/04/17/mysql-installation-and-configuration/"/>
    <id>http://yoursite.com/2020/04/17/mysql-installation-and-configuration/</id>
    <published>2020-04-17T03:04:03.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>记录 ubuntu18.04 安装并配置 MySQL</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code class="shell">$ sudo apt install mysql-server</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>使用命令出现如下错误，<a href="https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost" target="_blank" rel="noopener">原因及解决方法</a></p><pre><code class="shell">$ mysql -ui root -pERROR 1698 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39;$ sudo mysql -u root # I had to use &quot;sudo&quot; since is new installationmysql&gt; USE mysql;mysql&gt; SELECT User, Host, plugin FROM mysql.user;+------------------+-----------+-----------------------+| User             | Host      | plugin                |+------------------+-----------+-----------------------+| root             | localhost | auth_socket           || mysql.session    | localhost | mysql_native_password || mysql.sys        | localhost | mysql_native_password || debian-sys-maint | localhost | mysql_native_password |+------------------+-----------+-----------------------+4 rows in set (0.00 sec)mysql&gt; CREATE USER &#39;sql-test&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;&#39;;Query OK, 0 rows affected (0.00 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;sql-test&#39;@&#39;localhost&#39;;ERROR 1133 (42000): Can&#39;t find any matching row in the user tablemysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;sql-test&#39;@&#39;localhost&#39;;Query OK, 0 rows affected (0.00 sec)mysql&gt; UPDATE user SET plugin=&#39;auth_socket&#39; WHERE User=&#39;sql-test&#39;;mysql&gt; FLUSH PRIVILEGES;mysql&gt; SELECT User, Host, plugin FROM mysql.user;+------------------+-----------+-----------------------+| User             | Host      | plugin                |+------------------+-----------+-----------------------+| root             | localhost | auth_socket           || mysql.session    | localhost | mysql_native_password || mysql.sys        | localhost | mysql_native_password || debian-sys-maint | localhost | mysql_native_password || sql-test         | localhost | auth_socket           |+------------------+-----------+-----------------------+5 rows in set (0.00 sec)mysql&gt; UPDATE user SET plugin=&#39;mysql_native_password&#39; WHERE User=&#39;sql-test&#39;;mysql&gt; FLUSH PRIVILEGES;mysql&gt; exit;$ sudo service mysql restart$ mysql -u sql-tesmysql&gt;</code></pre><p>其他命令：</p><ol><li>检查MySQL服务器占用端口 <code>netstat -nlt|grep 3306</code></li><li>检查MySQL服务器系统进程 <code>ps -aux|grep mysql</code></li><li>查看数据库的字符集编码 <code>show variables like &#39;%char%&#39;;</code></li><li>重启 <code>service mysqld restart</code></li></ol><h2 id="pymysql简单使用"><a href="#pymysql简单使用" class="headerlink" title="pymysql简单使用"></a>pymysql简单使用</h2><ul><li>创建数据库<pre><code class="python">pymysql.connect(host=&#39;127.0.0.1&#39;, user=&#39;test&#39;, passwd=&#39;&#39;, use_unicode=True)cursor = self.connect.cursor()cursor.execute(&quot;create database if not exists sql-test&quot;)</code></pre></li><li>选择数据库<pre><code class="python">self.cursor.execute(&quot;use sql-test;&quot;)</code></pre></li><li>创建表<pre><code class="python">sql = &quot;&quot;&quot;create table if not exists saes(  pos varchar(20),  area varchar(20),  name varchar(100),  time varchar(20));&quot;&quot;&quot;cursor.execute(sql)</code></pre></li><li>更新数据<pre><code class="python">cursor.execute(&quot;&quot;&quot;select * from saes where name = %s&quot;&quot;&quot;, item[&quot;name&quot;])ret = cursor.fetchone()if ret:  cursor.execute(      &quot;&quot;&quot;update saes set pos = %s,area = %s,          name = %s,time = %s          where name = %s&quot;&quot;&quot;,      (item[&#39;pos&#39;],      item[&#39;area&#39;],      item[&#39;name&#39;],      item[&#39;time&#39;],      item[&#39;name&#39;]))else:  cursor.execute(      &quot;&quot;&quot;insert into saes(pos,area,cku,name,time)      value (%s,%s,%s,%s)&quot;&quot;&quot;,      (item[&#39;pos&#39;],      item[&#39;area&#39;],      item[&#39;name&#39;],      item[&#39;time&#39;]))connect.commit()</code></pre></li><li>删除表<pre><code class="python">drop table tablename;</code></pre></li></ul><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><pre><code class="sql">mysql&gt; CREATE TABLE students (    -&gt; id bigint(20) NOT NULL AUTO_INCREMENT,    -&gt; name varchar(100) NOT NULL,    -&gt; gender varchar(1) NOT NULL,    -&gt; score int(11) NOT NULL,    -&gt; PRIMARY KEY (id)    -&gt; ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</code></pre><p>指定字符集为 <code>utf8</code></p><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><pre><code>create database new_dbname;--新建数据库drop database old_dbnane; --删除数据库show databases;--显示数据库use databasename;--使用数据库select database();--查看已选择的数据库show tables;--显示当前库的所有表create table tablename(fieldname1 fieldtype1,fieldname2 fieldtype2,..)[ENGINE=engine_name];--创建表drop table tablename; --删除表create table tablename select statement;--通过子查询创建表desc tablename;--查看表结构show create table tablename;--查看建表语句alter table tablename add new_fielname new_fieldtype;--新增列alter table tablename add new_fielname new_fieldtype after 列名1;--在列名1后新增列alter table tablename modify fieldname new_fieldtype;--修改列alter table tablename drop fieldname;--删除列alter table tablename_old rename tablename_new;--表重命名insert into tablename(fieldname1,fieldname2,fieldnamen) valuse(value1,value2,valuen);--增delete from tablename [where fieldname=value];--删update tablename set fieldname1=new_value where filename2=value;--改select * from tablename [where filename=value];--查truncate table tablename;--清空表中所有数据，DDL语句show engines;--查看mysql现在已提供的存储引擎:show variables like &#39;%storage_engine%&#39;;--查看mysql当前默认的存储引擎show create table tablename;--查看某张表用的存储引擎（结果的&quot;ENGINE=&quot;部分）alter table tablename ENGINE=InnoDB--修改引擎create table tablename(fieldname1 fieldtype1,fieldname2 fieldtype2,..) ENGINE=engine_name;--创建表时设置存储引擎</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录 ubuntu18.04 安装并配置 MySQL&lt;/p&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://yoursite.com/categories/SQL/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>scrapy使用</title>
    <link href="http://yoursite.com/2020/03/30/python-scrapy/"/>
    <id>http://yoursite.com/2020/03/30/python-scrapy/</id>
    <published>2020-03-30T05:40:08.000Z</published>
    <updated>2020-09-23T07:12:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/index.html" target="_blank" rel="noopener">scrapy</a> 爬虫框架编写爬虫</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>安装 <code>pip3 install scrapy --user</code></li><li>css 选择器 <a href="http://www.ruanyifeng.com/blog/2009/03/css_selectors.html" target="_blank" rel="noopener">CSS选择器笔记</a></li><li>xpath 选择器 <a href="https://www.jianshu.com/p/539356db0c0c" target="_blank" rel="noopener">scrapy提取数据之：xpath选择器</a></li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>使用 <code>scrapy shell urls</code> 进行调试</p><ol><li>配置默认请求头<pre><code>&gt;&gt;&gt; settings.DEFAULT_REQUEST_HEADERS = { &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;, &#39;Accept-Language&#39;: &#39;en&#39;, &#39;user-agent&#39;: &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 \ (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#39;}</code></pre></li><li>使用 <code>fetch(urls)</code> 命令来抓取测试的页面，解析为 <code>response</code></li><li>使用 <code>response.css</code> 分析页面</li></ol><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><ol><li><code>scrapy startproject projectname</code> 新建项目</li><li><code>scrapy genspider demo demo.com</code> 新建爬虫</li></ol><pre><code class="shell">$ scrapy startproject DemoNew Scrapy project &#39;Demo&#39;, using template directory &#39;~/.local/lib/python3.6/site-packages/scrapy/templates/project&#39;, created in:    ~/python/crawler/scrapy/DemoYou can start your first spider with:    cd Demo    scrapy genspider example example.com$ cd Demo$ scrapy genspider demo demo.com$ tree.├── Demo│   ├── __init__.py│   ├── items.py│   ├── middlewares.py│   ├── pipelines.py│   ├── settings.py│   └── spiders│       ├── demo.py│       └── __init__.py└── scrapy.cfg4 directories, 11 files</code></pre><ul><li><code>items.py</code> 数据模型文件</li><li><code>middlewares.py</code> 中间件文件，配置所有中间件</li><li><code>pipelines.py</code> 管道文件，用于处理数据输出</li><li><code>settings.py</code> 配置文件</li><li><code>demo.py</code> 爬虫文件</li><li><code>scrapy.cfg</code> 整个Scrapy的配置文件，由Scrapy自动生成</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置文件 <code>settings.py</code></p><ol><li><code>LOG_LEVEL = &#39;WARNING&#39;</code> 输出级别</li><li><code>ROBOTSTXT_OBEY = False</code></li><li><code>FEED_EXPORT_ENCODING = &#39;utf-8&#39;</code> 支持中文</li></ol><h2 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h2><p>生成的爬虫文件如下</p><pre><code class="python"># -*- coding: utf-8 -*-import scrapyclass DemoSpider(scrapy.Spider):    name = &#39;demo&#39;    allowed_domains = [&#39;demo.com&#39;]    start_urls = [&#39;http://demo.com/&#39;]    def parse(self, response):        pass</code></pre><p>所有的 Spider 类都必须得继承 scrapy.Spider，其中 <code>name</code>、<code>start_urls</code> 以及 <code>parse</code> 成员方法是每个 Spider 类必须要声明的。详细见<a href="https://docs.scrapy.org/en/latest/topics/spiders.html?highlight=Spider#spiders" target="_blank" rel="noopener">Spider</a></p><p>需要定义 <code>start_urls</code> 或者重写 <code>start_requests</code> 方法，两者都必须是可迭代对象</p><pre><code class="python">class Demo(scrapy.Spider):    name = &quot;demo&quot;    allowed_domains = [&quot;demo.com&quot;]    def start_requests(self):        yield Request(url=&#39;https://demo.com/p/&#39;, headers=headers, callback=self.parse_rank)    def parse_rank(self, response):        for item in response.css(&#39;article&gt;a&#39;):            name = item.css(&#39;.post-card-title::text&#39;).get()            link = item.css(&#39;::attr(href)&#39;).get()            print(&quot;\033[1;31m[%s]: %s\033[0m\n&quot; % (name, link))            yield Request(url=link, headers=headers, callback=self.parse_one)        next_page = response.css(&#39;ol&gt;li.next&#39;).css(&#39;a::attr(href)&#39;).get()        if next_page:            print(&quot;%s&quot; % next_page)            yield Request(next_page, callback=self.parse_rank)    def parse_one(self, response):        for src in response.css(&#39;div#post[role=main] p img::attr(src)&#39;).getall():            print(&quot;\033[1;32m%s\n\033[0m&quot; % src)            item = HaosuItem()            item[&#39;src&#39;] = src            yield item</code></pre><blockquote><p>所有具备解析功能的函数都应该返回 Item 或 Requests</p></blockquote><h2 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h2><p>在 <code>item.py</code> 中定义数据模型</p><pre><code>class HaosuItem(scrapy.Item):    # define the fields for your item here like:    src = scrapy.Field()    pass</code></pre><p>数据填充并返回 <code>item</code> 见上述函数 <code>parse_one</code></p><h2 id="图片下载"><a href="#图片下载" class="headerlink" title="图片下载"></a>图片下载</h2><p>Scrapy 提供了一个 item pipeline 用于下载</p><pre><code class="python">from scrapy.pipelines.images import ImagesPipelineimport scrapyclass HaosuPipeline(ImagesPipeline):    def get_media_requests(self, item, info):        yield scrapy.Request(item[&#39;src&#39;])</code></pre><p>从 <code>item</code> 中获取下载地址并下载，修改 <code>setting.py</code> 开启管道</p><pre><code>ITEM_PIPELINES = {    &#39;haosu.pipelines.HaosuPipeline&#39;: 5,}IMAGES_STORE = &#39;image&#39;</code></pre><h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><h3 id="内置工具"><a href="#内置工具" class="headerlink" title="内置工具"></a>内置工具</h3><pre><code class="shell">$ scrapy crawl spider -o data.json$ scrapy crawl spider -o data.csv$ scrapy crawl spider -o data.xml$ scrapy crawl spider -s FEED_URI=&#39;/home/user/folder/mydata.csv&#39; -s FEED_FORMAT=csv</code></pre><h3 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h3><pre><code class="python">from scrapy.exporters import CsvItemExporterclass CsvPipeline (object):    def __init__ (self):        self.file = open (&#39;databases.csv&#39;, &#39;wb&#39;)        self.exporter = CsvItemExporter(self.file)        self.exporter.start_exporting()    def close_spider (self, spider):        self.exporter.finish_exporting()        self.file.close()    def process_item (self, item, spider):        print(&quot;%s&quot; % item.__class__)        self.exporter.export_item(item)        return item</code></pre><p>在 <code>settings.py</code> 中启动 <code>pipeline</code></p><pre><code>ITEM_PIPELINES = {    &#39;satellites.pipelines.SatellitesPipeline&#39;: 300,    &#39;satellites.pipelines.CsvPipeline&#39;: 500,}</code></pre><h2 id="classmethod-使用"><a href="#classmethod-使用" class="headerlink" title="classmethod 使用"></a>classmethod 使用</h2><p>使用 <code>classmethod</code> 创建不同的数据库</p><pre><code class="python">def __init__(self, mysql_dbname):    # create db    sql = &quot;CREATE DATABASE if not exists &quot; + mysql_dbname    self.cursor = self.connect.cursor()    self.cursor.execute(sql)@classmethoddef from_crawler(cls, crawler):    settings = crawler.settings    mysql_dbname = settings.get(&#39;MYSQL_DBNAME&#39;)    print(&quot;%s&quot; % mysql_dbname)    return cls(mysql_dbname)</code></pre><h2 id="pymysql-数据存储"><a href="#pymysql-数据存储" class="headerlink" title="pymysql 数据存储"></a>pymysql 数据存储</h2><ul><li><a href="https://pymysql.readthedocs.io/en/latest/user/index.html" target="_blank" rel="noopener">User Guide</a></li><li><a href="https://pymysql.readthedocs.io/en/latest/modules/index.html" target="_blank" rel="noopener">API Reference</a></li><li><a href="https://juejin.im/post/5c7e524af265da2d914db18f" target="_blank" rel="noopener">SQL 语法速成手册</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1177760294764384" target="_blank" rel="noopener">SQL教程</a></li></ul><pre><code class="python">import pymysqlself.connect = pymysql.connect(    host=settings.MYSQL_HOST,    user=settings.MYSQL_USER,    passwd=settings.MYSQL_PASSWD,    charset=&#39;utf8&#39;,    use_unicode=True)sql = &quot;CREATE DATABASE if not exists &quot; + mysql_dbnameself.cursor = self.connect.cursor()self.cursor.execute(sql)self.cursor.execute(&quot;USE %s;&quot; % mysql_dbname)# create satellite tablesql = &quot;&quot;&quot;CREATE TABLE if not exists satellites(    id bigint(20) NOT NULL AUTO_INCREMENT,    position varchar(20),    area varchar(30),    band varchar(10),    name varchar(100),    time varchar(20),    PRIMARY KEY (id)    ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;&quot;&quot;&quot;self.cursor.execute(sql)</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre><code class="shell">$ scrapy crawl demo</code></pre><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><h3 id="网页返回乱码"><a href="#网页返回乱码" class="headerlink" title="网页返回乱码"></a>网页返回乱码</h3><p><code>DEFAULT_REQUEST_HEADERS</code> 设置 <code>Accept-Encoding</code> 为 <code>gzip,deflate</code> 导致网页返回乱码</p><p>这个配置表示接受压缩后的数据，需要自己解压缩</p><h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><pre><code>ROBOTSTXT_OBEY = False</code></pre><h2 id="Scrapy-体系结构"><a href="#Scrapy-体系结构" class="headerlink" title="Scrapy 体系结构"></a>Scrapy 体系结构</h2><ul><li><a href="https://docs.scrapy.org/en/latest/topics/architecture.html" target="_blank" rel="noopener">Architecture overview</a></li></ul><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://juejin.im/post/5cfc6f716fb9a07ea7130308" target="_blank" rel="noopener">Scrapy简明教程</a></li><li><a href="https://docs.scrapy.org/en/latest/index.html" target="_blank" rel="noopener">Scrapy 2.0 documentation</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;a href=&quot;https://scrapy-chs.readthedocs.io/zh_CN/1.0/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;scrapy&lt;/a&gt; 爬虫框架编写爬虫&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="Spider" scheme="http://yoursite.com/categories/Python/Spider/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="spider" scheme="http://yoursite.com/tags/spider/"/>
    
      <category term="scrapy" scheme="http://yoursite.com/tags/scrapy/"/>
    
  </entry>
  
</feed>
